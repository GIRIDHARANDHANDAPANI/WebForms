@page
@model Form.Areas.Finance.Pages.VoucherEntryReceiptsModel
@{
    ViewData["Title"] = "Receipt Voucher Details";
}
<style type="text/css">
    .dx-datagrid .dx-row {
        border-bottom: 1px solid #ccc; /* Border between rows */
    }

    .card {
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        padding: 15px;
        margin: 20px auto;
        max-width: 1300px;
       background-color: #595959;
    } 

    .horizontal-container {
        display: flex;
        gap: 10px; /* Adds spacing between buttons */
        justify-content: start; /* Aligns buttons to the left */
        align-items: center; /* Vertically centers the buttons */
        margin: 15px;
    }

    .dx-selectbox .dx-texteditor-input {
        text-align: center; /* Centers the text inside the input */
    }



    .button-alignment-down {
        margin-bottom: 10px
    }

</style>
<div class="card">
    <div class="content-container">
        <div class="card-header" style=" color: white; font-weight:bolder; font-size: 24px;background-color:  #595959;">
         
            Receipts Voucher Details:
        </div>
        <div id="costAllocationPopup" style="display:none;">
            <div style="margin-bottom:10px">
                @(Html.DevExtreme().Button()
                    .ID("btnSaveCostAllocation")
                    .Icon("save")
                    .Text("Save")
                    .OnClick("function() { saveCostAllocation(); }")
                    )
            </div>
        </div>


    
        <div class="dx-fieldset horizontal-container" style="margin-bottom:0px">
            <div class="form-group">
                <label for="PurchaseVoucherNo" class="button-alignment-down" style="color: white;">Voucher No</label>

                @(
                    Html.DevExtreme().TextBox()
                    .ID("VoucherNo")
                    .Value(null)
                    )
            </div>

            <div class="form-group">
                <label for="VoucherDate" class="button-alignment-down" style="color: white;">Voucher Date</label>

                @(Html.DevExtreme().DateBox()

                    .ID("VoucherDate")

                    .InputAttr("aria-label", "Date")

                    .LabelMode(EditorLabelMode.Outside)

                    .Type(DateBoxType.Date)

                    .DisplayFormat("yyyy-MM-dd")

                    .Value(new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1))

                    )
            </div>
            <div class="form-group">
                <label for="EffectiveDate" class="button-alignment-down" style="color: white;">Effective Date</label>

                @(Html.DevExtreme().DateBox()

                    .ID("EffectiveDate")

                    .InputAttr("aria-label", "Date")

                    .LabelMode(EditorLabelMode.Outside)

                    .Type(DateBoxType.Date)

                    .DisplayFormat("yyyy-MM-dd")

                    .Value(new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1))

                    )
            </div>
            <div class="form-group">
                <label for="" class="button-alignment-down" style="color: white;">Receiving Account:</label>

                @(Html.DevExtreme().DropDownBox()

                    .DataSource(d => d.WebApi()

                    .Controller("VoucherEntryReceipts")

                    .LoadAction("GetReceivingAccount")

                    .LoadMode(DataSourceLoadMode.Raw)

                    .Key("AccountId")

                    )

                    .LabelMode(EditorLabelMode.Outside)

                    .ID("accountDropDownBox")

                    .ShowClearButton(true)

                    .AcceptCustomValue(true)

                    .OpenOnFieldClick(false)

                    .ValueChangeEvent("input")

                    .HoverStateEnabled(true)

                    .ValueExpr("AccountId")

                    .DisplayExpr("AccountHead")

                    .OnInput("dropDownBoxOnInput")

                    .OnOpened("onOpened")

                    .Width(720)

                    .TabIndex(1)

                    .DropDownOptions(o => o

                    .Width(1000)

                    )

                    .OnKeyDown("onKeyDown")

                    //.OnValueChanged("dropDownBoxValueChanged")

                    .ContentTemplate(new TemplateName("PaymentAmountContentTemplate"))

                    )

            </div>

            

        </div>

      

        <div class="dx-fieldset horizontal-container " style="margin-top:15px;margin-bottom:0px;background-color: #f0f0f0">

            <div class="form-group" style="padding-left:20px">
                <div class="button-alignment-down">
                    <label for="DrCr">Dr/Cr</label>
                </div>
                @(
                    Html.DevExtreme().SelectBox()
                    .ID("TransactionTypeComboBox")
                    .DataSource(new[] { "Dr", "Cr" })
                    .Value("Dr")
                    .Placeholder("Select Transaction Type")
                    .Width(90)
                    )
            </div>
            <div class="form-group">
                <label for="AccountHead" class="button-alignment-down">Account Head:</label>
                @(Html.DevExtreme().DropDownBox()
                    .DataSource(d => d.WebApi()
                    .Controller("VoucherEntryReceipts")
                    .LoadAction("GetAccountHead")
                    .LoadMode(DataSourceLoadMode.Raw)
                    .Key("AccountId")
                    )
                    .LabelMode(EditorLabelMode.Outside)
                    .ID("AccountHeadDropDown")
                    .ShowClearButton(true)
                    .AcceptCustomValue(true)
                    .OpenOnFieldClick(false)
                    .ValueChangeEvent("input")
                    .HoverStateEnabled(true)
                    .ValueExpr("AccountId")
                    .DisplayExpr("AccountHead")
                    .OnInput("dropDownBoxOnInput")
                    .OnOpened("onOpened")
                    .Width(650)
                    .TabIndex(1)
                    .DropDownOptions(o => o
                    .Width(1000)
                    )
                    .OnKeyDown("onKeyDown")
                    //.OnValueChanged("dropDownBoxValueChanged")
                    .ContentTemplate(new TemplateName("AccountHeadContentTemplate"))
                    )
            </div>
            <div class="form-group" style="margin-top:56px;margin-left:-10px">
                @(Html.DevExtreme().Button()
                    .ID("btnAddAHead")
                    .Icon("plus")
                    )
            </div>
            <div class="form-group" style="margin-top:56px;margin-left:-10px">
                @(Html.DevExtreme().Button()
                    .ID("btnEditAHead")
                    .Icon("edit")
                    )
            </div>
            <div class="form-group">
                <label for="Amount" class="button-alignment-down">Amount</label>
                @(
                    Html.DevExtreme().TextBox()
                    .ID("Amount")
                    .Value("0")
                    )
            </div>
        </div>
     
        <div class="dx-fieldset horizontal-container " style="margin-top:0px;margin-bottom:0px;padding-top:15px;padding-bottom:30px;background-color: #f0f0f0;">
            <div class="form-group" style="padding-left:20px">
                <label for="Amount" class="button-alignment-down" style="margin-right:25px">Narration</label>
            </div>
            <div class="form-group">
                @(
                    Html.DevExtreme().TextArea()
                    .ID("Narration")
                    .Value("")
                    .Height(70)
                    .Width(720)
                    .Placeholder("Enter your comments here...")
                    .MaxLength(500)
                    )
            </div>
            <div class="form-group" style="">
                @(Html.DevExtreme().Button()
                    .ID("btnaddCostAllocation")
                    .Text("ADD")
                    .Height(70)
                    .Width(178)
                    .Icon("plus")
                    .OnClick("function() { addCostAllocation(); }")
                    )
            </div>

        </div>
        <div class="dx-field ledgerResult">
            @(
                Html.DevExtreme().DataGrid()
                .ID("dataGrid")
                .RemoteOperations(false)
                .Columns(columns =>
                {
                    columns.Add().Caption("Dr/Cr");
                    columns.Add().Caption("Account Head");
                    columns.Add().Caption("Debit");
                    columns.Add().Caption("Credit");
                    columns.Add().Caption("Entry Narration");
                    columns.Add().Caption("Remarks");
                })
                //.ColumnChooser(columnChooser => columnChooser.Enabled(true).Title("Column Chooser").Mode(GridColumnChooserMode.Select))
                .AllowColumnReordering(true) // Enable column reordering
                .AllowColumnResizing(true)   // Enable column resizing
                .ColumnFixing(fixing => fixing.Enabled(true)) // Allow column fixing (pinning)
                .HeaderFilter(filter => filter.Visible(true))
                .Height(250)
                .ColumnAutoWidth(true)
                .FilterRow(filterRow => filterRow.Visible(false)) // Initially hide the FilterRow
                .GroupPanel(groupPanel => groupPanel.Visible(false)) // Display group panel
                .ShowBorders(true)
                .Width("100%")
                )
        </div>
       
        <div class="container" style="margin-top:0px;margin-bottom:0px;padding-top:15px;background-color: #f0f0f0;padding-bottom:30px">
            <div class="row g-3">
                <div class="col-md-2 backgroundcolor" style="padding-top:10px;padding-bottom:10px">
               
                    <div class="form-group">
                        <label for="ClientPONo">Client PO No</label>
                        @(
                            Html.DevExtreme().TextBox()
                            .ID("ClientPONo")

                            .Value(null)
                            )
                    </div>
                    <div class="form-group mt-3">
                        <label for="VoucherType">VoucherType</label>
                        @(
                            Html.DevExtreme().SelectBox()
                            .ID("VoucherType")
                            .DataSource(new[] { "Cash Receipts", "Bank Receipts" })
                            .Value(null)

                            )
                    </div>
                </div>
               
                <div class="col-md-9 backgroundcolor" style="padding-top:10px;padding-bottom:10px">
                    <div class="form-group">
                        <label for="VoucherNarration">Voucher Narration</label>
                        @(
                            Html.DevExtreme().TextBox()
                            .ID("VoucherNarration")
                            .Value(null)

                            )
                    </div>
                    <div class="form-group mt-3">
                        <label for="Remarks">Remarks</label>
                        @(
                            Html.DevExtreme().TextBox()
                            .ID("Remarks")
                            .Value(null)

                            )

                    </div>
                    <div class="row">
                        <div class="col-md-7">
                            <div>
                                @(Html.DevExtreme().CheckBox()
                                    .ID("VerifiedOn")
                                    )<span style="margin-left:5px">Verified By:</span>
                            </div>
                            <div style="margin-left:25px">Verified On:</div>
                        </div>
                        <div class="col-md-5">
                            <div>
                                @(Html.DevExtreme().CheckBox()
                                    .ID("ApprovedBy")
                                    )<span style="margin-left:5px">Approved By:</span>
                            </div>
                            <div style="margin-left:25px">Approved On:</div>
                        </div>
                    </div>
                </div>
               
                <div class="col-md-1 backgroundcolor">
                    <div class="form-group" style="padding-top:50px;padding-left:7px;">
                        @(Html.DevExtreme().Button()
                            .ID("btnAttachment")
                            .Icon("attach")
                            .Height(100)
                            .Width(100)
                            )
                    </div>
                </div>
            </div>
        </div>
        <div>
            @await Html.PartialAsync("_InputFormFooter")
        </div>
        <!-- Drop Down Grid Template -->
        @using (Html.DevExtreme().NamedTemplate("PaymentAmountContentTemplate"))
        {
            @(Html.DevExtreme().DataGrid()
                    .ID("suppliername-datagrid")
                    .DataSource(d => d.WebApi()
                    .Controller("VoucherEntryReceipts")
                    .LoadAction("GetReceivingAccount")
                    .LoadMode(DataSourceLoadMode.Raw)
                    .Key("AccountId")
                    )
                    .WordWrapEnabled(true)
                    .ShowBorders(true)
                    .SearchPanel(sp => sp.HighlightSearchText(true))
                    .Selection(sl => sl.Mode(SelectionMode.Single)) // Set to Single selection mode
                    .OnSelectionChanged("dataGridSelectionChanged")
                    .OnInitialized("dataGridInitialized")
                    .HeaderFilter(p => p.Visible(true))
                    .ShowBorders(true)
                    .HoverStateEnabled(true)
                    .Paging(p => p.PageSize(15))
                    .FilterRow(f => f.Visible(true))
                    .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
                    .Height(345)
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .SelectedRowKeys(new JS(@"component.option(""value"") ? [component.option(""value"")] : []"))
                    @* .Columns(columns =>
                    {
                        columns.Add().DataField("AccountId");
                        columns.Add().DataField("AccountHead")
                
                       .Alignment(HorizontalAlignment.Center)
                    .CellTemplate(@<text>
            <div class="dx-icon">
                <%= data.IsLedgerObselete ? '<i style="color:green" class="fa fa-toggle-on"></i>' : '<i style="color:red" class="fa fa-toggle-off"></i>' %>
            </div>
        </text>);

                    })
 *@                )
        }
        <!-- Drop Down Account Head Grid Template -->
        @using (Html.DevExtreme().NamedTemplate("AccountHeadContentTemplate"))
        {
            @(Html.DevExtreme().DataGrid()
                    .ID("accounthead-datagrid")
                    .DataSource(d => d.WebApi()
                    .Controller("VoucherEntryReceipts")
                    .LoadAction("GetAccountHead")
                    .LoadMode(DataSourceLoadMode.Raw)
                    .Key("AccountId")
                    )
                    .WordWrapEnabled(true)
                    .ShowBorders(true)
                    .SearchPanel(sp => sp.HighlightSearchText(true))
                    .Selection(sl => sl.Mode(SelectionMode.Single)) // Set to Single selection mode
                    .OnSelectionChanged("dataGridAccountHeadSelectionChanged")
                    .OnInitialized("dataGridAccountHeadInitialized")
                    .HeaderFilter(p => p.Visible(true))
                    .ShowBorders(true)
                    .HoverStateEnabled(true)
                    .Paging(p => p.PageSize(15))
                    .FilterRow(f => f.Visible(true))
                    .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
                    .Height(345)
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .SelectedRowKeys(new JS(@"component.option(""value"") ? [component.option(""value"")] : []"))
                    .Columns(columns =>
                    {
                        columns.Add().DataField("AccountId");
                        columns.Add().DataField("AccountHead");
                        columns.Add().DataField("AccountHeadArabic");
                        columns.Add().DataField("IsLedgerObselete").Alignment(HorizontalAlignment.Center)
                    .CellTemplate(@<text>
            <div class="dx-icon">
                <%= data.IsLedgerObselete ? '<i style="color:green" class="fa fa-toggle-on"></i>' : '<i style="color:red" class="fa fa-toggle-off"></i>' %>
            </div>
        </text>);

                    })
                )
        }


    </div>
</div>
<script>
    $(function () {
        $("#costAllocationPopup").dxPopup({
            title: "Cost Allocation",
            width: 300,
            height: 200,
            visible: false,
            showCloseButton: true,
            closeOnOutsideClick: true,

        });


    });
    $("#btnSave").on("click", function (e) {
        e.preventDefault();
        alert(2);
    });
    function addCostAllocation() {
        $("#costAllocationPopup").dxPopup("instance").show();
    }
    function saveCostAllocation() {
        $("#costAllocationPopup").dxPopup("instance").close();
    }
    function dropDownBoxOnInput(e) {
        const ddbInstance = e.component;
        if (!ddbInstance.option("opened")) ddbInstance.open();


        const text = ddbInstance.option("text");
        if (dataGrid) {
            dataGrid.option("searchPanel.text", text);
        }
    }

    function onOpened(e) {
        setTimeout(() => {
            e.component.focus();
        });
    }

    function onKeyDown(e) {
        const ddbInstance = e.component;
        if (e.event.keyCode !== 40) return;
        if (!ddbInstance.option("opened")) {
            ddbInstance.open();
        } else {
            let focusedIndex = dataGrid.option("focusedRowIndex");
            let visibleRows = dataGrid.getVisibleRows().length - 1;
            if (focusedIndex === -1 || visibleRows < focusedIndex) focusedIndex = 0;
            dataGrid.focus(dataGrid.getRowElement(focusedIndex));
        }
    }

    function dataGridSelectionChanged(e) {
        const selectedKey = e.selectedRowKeys[0]; // Get the first selected key, if any
        const ddbInstance = $("#accountDropDownBox").dxDropDownBox("instance");

        if (selectedKey) {
            ddbInstance.option("value", selectedKey);
            if (ddbInstance.option("opened")) {
                ddbInstance.close();
            }
        }

    }
    function dataGridAccountHeadSelectionChanged(e) {
        const selectedKey = e.selectedRowKeys[0];
        const ddbInstance = $("#AccountHeadDropDown").dxDropDownBox("instance");

        if (selectedKey) {
            ddbInstance.option("value", selectedKey);
            if (ddbInstance.option("opened")) {
                ddbInstance.close();
            }
        }

    }
    function dataGridInitialized(e) {
        dataGrid = e.component;
    }
    function dataGridAccountHeadInitialized(e) {
        dataGrid = e.component;
    }
</script>